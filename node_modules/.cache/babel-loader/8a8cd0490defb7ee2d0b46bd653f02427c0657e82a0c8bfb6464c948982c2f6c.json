{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport movieApi from \"../../common/apis/movieApi\";\nimport { APIKEY } from \"../../common/apis/movieApiKey\";\nexport const fetchAsyncMovies = createAsyncThunk(\"movies/fetchAsyncMovies\", async () => {\n  var movieText = \"Harry\";\n  const response = await movieApi.get(`?apiKey=${APIKEY}&s=${movieText}&type=movie`);\n  return response.data;\n});\nconst initialState = {\n  movies: {}\n};\nconst moviesSlice = createSlice({\n  name: \"movies\",\n  initialState,\n  reducers: {\n    addMovies: (state, {\n      payload\n    }) => {\n      state.movies = payload;\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchAsyncMovies.pending, () => {\n      console.log(\"Pending\");\n    }).addCase(fetchAsyncMovies.fulfilled, (state, action) => {\n      state.movies = action.payload;\n      console.log(state.movies);\n    }).addCase(fetchAsyncMovies.rejected, () => {\n      console.log(\"Rejected\");\n    });\n  }\n});\nexport const {\n  addMovies\n} = moviesSlice.actions;\nexport const getAllMovies = state => state.movies;\nexport default moviesSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","movieApi","APIKEY","fetchAsyncMovies","movieText","response","get","data","initialState","movies","moviesSlice","name","reducers","addMovies","state","payload","extraReducers","builder","addCase","pending","console","log","fulfilled","action","rejected","actions","getAllMovies","reducer"],"sources":["/home/edlawitg/Documents/Moive_app with reduxtoolkit/movieapp/src/features/Movies/movieSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport movieApi from \"../../common/apis/movieApi\";\nimport {APIKEY} from \"../../common/apis/movieApiKey\";\nexport const fetchAsyncMovies = createAsyncThunk(\n  \"movies/fetchAsyncMovies\",\n  async () => {\n    var movieText = \"Harry\";\n    const response = await movieApi.get(\n      `?apiKey=${APIKEY}&s=${movieText}&type=movie`\n    );\n    return response.data;\n  }\n);\nconst initialState = {\n  movies: {},\n};\nconst moviesSlice = createSlice({\n  name: \"movies\",\n  initialState,\n  reducers: {\n    addMovies: (state, { payload }) => {\n      state.movies = payload;\n    },\n  },\n  extraReducers(builder){\n    builder\n    .addCase(fetchAsyncMovies.pending,()=>{\n      console.log(\"Pending\");\n    })\n    .addCase(fetchAsyncMovies.fulfilled, (state, action) => {\n      state.movies = action.payload;\n      console.log(state.movies);\n\n    })\n    .addCase(fetchAsyncMovies.rejected,()=>{\n      console.log(\"Rejected\");\n    })\n   \n  }\n});\nexport const { addMovies } = moviesSlice.actions;\nexport const getAllMovies = (state) => state.movies;\nexport default moviesSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,SAAQC,MAAM,QAAO,+BAA+B;AACpD,OAAO,MAAMC,gBAAgB,GAAGJ,gBAAgB,CAC9C,yBAAyB,EACzB,YAAY;EACV,IAAIK,SAAS,GAAG,OAAO;EACvB,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,GAAG,CAChC,WAAUJ,MAAO,MAAKE,SAAU,aACnC,CAAC;EACD,OAAOC,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AACD,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,CAAC;AACX,CAAC;AACD,MAAMC,WAAW,GAAGV,WAAW,CAAC;EAC9BW,IAAI,EAAE,QAAQ;EACdH,YAAY;EACZI,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAK;MACjCD,KAAK,CAACL,MAAM,GAAGM,OAAO;IACxB;EACF,CAAC;EACDC,aAAaA,CAACC,OAAO,EAAC;IACpBA,OAAO,CACNC,OAAO,CAACf,gBAAgB,CAACgB,OAAO,EAAC,MAAI;MACpCC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACxB,CAAC,CAAC,CACDH,OAAO,CAACf,gBAAgB,CAACmB,SAAS,EAAE,CAACR,KAAK,EAAES,MAAM,KAAK;MACtDT,KAAK,CAACL,MAAM,GAAGc,MAAM,CAACR,OAAO;MAC7BK,OAAO,CAACC,GAAG,CAACP,KAAK,CAACL,MAAM,CAAC;IAE3B,CAAC,CAAC,CACDS,OAAO,CAACf,gBAAgB,CAACqB,QAAQ,EAAC,MAAI;MACrCJ,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACzB,CAAC,CAAC;EAEJ;AACF,CAAC,CAAC;AACF,OAAO,MAAM;EAAER;AAAU,CAAC,GAAGH,WAAW,CAACe,OAAO;AAChD,OAAO,MAAMC,YAAY,GAAIZ,KAAK,IAAKA,KAAK,CAACL,MAAM;AACnD,eAAeC,WAAW,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}